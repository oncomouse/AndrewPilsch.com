-# "<!--[if (gte IE 6)&(lte IE 8)]>"
- javascript_include_tag("#{javascript_path("vendor/selectivizr/selectivizr.min.js")}")
- javascript_include_tag("//cdnjs.cloudflare.com/ajax/libs/respond.js/1.2.0/respond.js")
- javascript_include_tag("//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.6.2/html5shiv.js")
- # "<![endif]-->"

- javascript_include_tag("vendor/head/head.min.js")
= javascript_include_tag("vendor/modernizr/modernizr.min.js")

- # Dynamically load the contents of the javascripts/libraries directory:
- def variable_name(path)
	- File.basename(path).gsub(".min", "").gsub(/\W/, "_")
- libraries = Dir.entries(Dir.pwd + "/" + config.source + "/" + config.js_dir + "/libraries").select { |x| !(x =~ /^\./) }

:javascript

	// Queue up the location of all the javascript libraries we will be loading. These file
	// paths are generated by Middleman at the moment of site compilation:
	var jquery_js = "//ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js",
	    jquery_isotope_js = "#{javascript_path("vendor/jquery/plugins/jquery.isotope.min.js")}",
	    imagesloaded_js = "#{javascript_path("vendor/imagesloaded/imagesloaded.min.js")}",

	    // Polyfills that will be loaded conditionally by Modernizr:
	    jquery_hashchange_js = "#{javascript_path 'vendor/jquery/plugins/jquery.hashchange.min.js'}",
	    matchmedia_js = "#{javascript_path("vendor/matchMedia/matchmedia.min.js")}",
	    selectivizr_js = "#{javascript_path("vendor/selectivizr/selectivizr.min.js")}",
		
	    // Libraries that perform various site maintainence functions:
	    #{
			libraries.map { |x| "#{variable_name(x)} = \"#{javascript_path 'libraries/' + x}\""}.join(",\n\t\t  ")
		},
	    plugins_js = "#{javascript_path("plugins.js")}",

	    // The control code for isotope and any other site setup:
	    mobile_js = "#{javascript_path("mobile.js")}",
	    site_js = "#{javascript_path("site.js")}";

	// We put these libraries into an array in order to dynamically add polyfills based on 
	// some tests below (this is because head.js doesn't run a callback if you pass it
	// an empty array for success or failure):
	var modernizr_js_array = [imagesloaded_js, jquery_isotope_js, plugins_js, #{
		libraries.map { |x| "#{variable_name(x)}" }.join(", ")
	}];
	
	// Polyfill for missing matchMedia() method:
	if(!window.matchMedia) {
		modernizr_js_array.push(matchmedia_js);
	}
	
	// Cache document.ready calls:
	var docready=[],$=function(o){function r(fn){docready.push(fn);}if(typeof o === 'function') r(o);return{ready: r}};
	
	/*head.load(modernizr_js_array, function(){
		// Test for mobile version using the Goldilocks media query (see above):
		head.test(
			window.matchMedia("all and (min-width: 33.236em)").matches,
			[jquery_hashchange_js, {isotope: site_js}],
			[{isotope: mobile_js}],
			function() {
				// Remove cached jQuery document.ready calls:
				$ = jQuery;         
		        for(n in docready) $(document).ready(docready[n]);
				
				start_isotope();
			}
		);
	});*/
	Modernizr.load([
		{
			load: jquery_js,
			complete: function() {
				if (!window.jQuery) {
					Modernizr.load("#{javascript_path("vendor/jquery/jquery.min.js")}");
				}
			}
		},
		{
			load: modernizr_js_array,
		},
		{
			test: Modernizr.hashchange,
			nope: jquery_hashchange_js
		},
		{
			test: Modernizr.borderradius,
			nope: selectivizr_js
		},
		{
			test: window.matchMedia("all and (min-width: 33.236em)").matches,
			yep: site_js,
			nope: mobile_js,
			complete: function() {
				
				// Remove cached jQuery document.ready calls:
				$ = jQuery;         
				for(n in docready) $(document).ready(docready[n]);
		
				start_isotope();
			}
		}
	]);